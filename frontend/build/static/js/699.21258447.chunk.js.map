{"version":3,"file":"static/js/699.21258447.chunk.js","mappings":"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","sources":["../node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/src/_assert.ts","../node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/src/crypto.ts","../node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/src/utils.ts","../node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/src/hmac.ts","../node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/src/_md.ts","../node_modules/@turnkey/api-key-stamper/node_modules/@noble/hashes/src/sha256.ts","../node_modules/@turnkey/api-key-stamper/node_modules/@noble/curves/src/p256.ts","../../src/purejs.ts"],"sourcesContent":["function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\n}\n\n// copied from utils\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(h: Hash) {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(h.outputLen);\n  number(h.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n","// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word: number, shift: number) =>\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\n\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word: number) =>\n  ((word << 24) & 0xff000000) |\n  ((word << 8) & 0xff0000) |\n  ((word >>> 8) & 0xff00) |\n  ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n: number) => n : (n: number) => byteSwap(n);\n\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr: Uint32Array) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nexport function abytes(item: unknown): void {\n  if (!isBytes(item)) throw new Error('Uint8Array expected');\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array) {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean) {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || isBytes(val),\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    ut.abytes(data);\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(\n      readonly px: T,\n      readonly py: T,\n      readonly pz: T\n    ) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y: bigint;\n        try {\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        } catch (sqrtError) {\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('Point is not on curve' + suffix);\n        }\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(\n      readonly r: bigint,\n      readonly s: bigint,\n      readonly recovery?: number\n    ) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = ut.isBytes(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || ut.isBytes(sg)) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Choice: a ? b : c\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = SHA256_IV[0] | 0;\n  B = SHA256_IV[1] | 0;\n  C = SHA256_IV[2] | 0;\n  D = SHA256_IV[3] | 0;\n  E = SHA256_IV[4] | 0;\n  F = SHA256_IV[5] | 0;\n  G = SHA256_IV[6] | 0;\n  H = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { createCurve } from './_shortw_utils.js';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { Field } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { createHasher } from './abstract/hash-to-curve.js';\n\n// NIST secp256r1 aka p256\n// https://www.secg.org/sec2-v2.pdf, https://neuromancer.sk/std/nist/P-256\n\nconst Fp = Field(BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'));\nconst CURVE_A = Fp.create(BigInt('-3'));\nconst CURVE_B = BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b');\n\n// prettier-ignore\nexport const p256 = createCurve({\n  a: CURVE_A, // Equation params: a, b\n  b: CURVE_B,\n  Fp, // Field: 2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n-1n\n  // Curve order, total count of valid points in the field\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n  // Base (generator) point (x, y)\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n  h: BigInt(1),\n  lowS: false,\n} as const, sha256);\nexport const secp256r1 = p256;\n\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: CURVE_A,\n    B: CURVE_B,\n    Z: Fp.create(BigInt('-10')),\n  }))();\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(secp256r1.ProjectivePoint, (scalars: bigint[]) => mapSWU(scalars[0]), {\n    DST: 'P256_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n  }))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n"],"names":["number","n","Number","isSafeInteger","Error","concat","bytes","b","a","Uint8Array","constructor","name","_len","arguments","length","lengths","Array","_key","includes","hash","h","create","outputLen","blockLen","exists","instance","checkFinished","undefined","destroyed","finished","output","out","min","crypto","globalThis","createView","arr","DataView","buffer","byteOffset","byteLength","rotr","word","shift","Uint32Array","toBytes","data","str","TextEncoder","encode","utf8ToBytes","abytes","Hash","clone","this","_cloneInto","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","randomBytes","bytesLength","getRandomValues","HMAC","super","assertHash","key","iHash","pad","set","i","oHash","fill","buf","assertExists","digestInto","assertBytes","destroy","to","Object","getPrototypeOf","hmac","message","BigInt","_1n","_2n","isBytes","item","hexes","from","_","toString","padStart","bytesToHex","hex","hexToNumber","asciis","_0","_9","_A","_F","_a","_f","asciiToBase16","char","hexToBytes","hl","al","array","ai","hi","n1","charCodeAt","n2","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","len","numberToBytesLE","ensureBytes","title","expectedLength","res","e","concatBytes","sum","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","v","k","reset","reseed","seed","gen","sl","slice","push","genUntil","pred","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","isArray","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","entries","_0n","_3n","_4n","_5n","_8n","mod","result","pow","num","power","modulo","invert","x","y","u","q","r","m","FpSqrt","P","p1div4","root","eql","sqr","c1","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","Math","ceil","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","validateBasic","curve","reduce","map","ORDER","MASK","BYTES","BITS","Gx","Gy","freeze","p","b2n","h2b","ut","DER","Err","_parseInt","E","subarray","d","l","toSig","sBytes","s","rBytesLeft","hexFromSig","sig","parseInt","shl","rhl","rl","weierstrassPoints","opts","CURVE","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","endo","beta","splitScalar","validatePointOpts","_c","point","_isCompressed","toAffine","tail","weierstrassEquation","x2","x3","add","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","error","pointPrecomputes","Map","assertPrjPoint","other","Point","px","py","pz","fromAffine","is0","normalizeZ","points","toInv","invertBatch","fromHex","assertValidity","fromPrivateKey","privateKey","BASE","multiply","_setWindowSize","windowSize","_WINDOW_SIZE","delete","left","right","hasEvenY","isOdd","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","double","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","subtract","wNAF","wnaf","wNAFCached","comp","multiplyUnsafe","I","unsafeLadder","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f","f1p","f2p","constTimeNegate","multiplyAndAddUnsafe","G","iz","z","inv","ax","ay","zz","cofactor","toRawBytes","isCompressed","toHex","_bits","c","bits","condition","W","windows","elm","precomputeWindow","base","window","precomputes","mask","maxNumber","shiftBy","offset","wbits","offset1","offset2","abs","cond1","cond2","precomputesMap","transform","get","ProjectivePoint","weierstrass","curveDef","bits2int","bits2int_modN","lowS","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","cat","head","y2","sqrt","sqrtError","suffix","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","R","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","isLE","fieldLen","minLen","reduced","precompute","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","prehash","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","C","drbg","verify","signature","publicKey","_Point$BASE$multiplyA","sg","_sig","derError","is","getHash","msgs","Maj","HashMD","padOffset","pos","view","take","process","dataView","roundClean","value","setBigUint64","_32n","_u32_max","wh","wl","setUint32","oview","outLen","state","SHA256_K","SHA256_IV","SHA256_W","SHA256","A","B","D","F","H","getUint32","W15","W2","s0","s1","T1","T2","Chi","sha256","bitLen","redef","sqrtP","lhs","rhs","FpPow","div","sqrN","addN","subN","mulN","lst","nums","lastMultiplied","acc","inverted","reduceRight","FpInvertBatch","cmov","Field","CURVE_A","CURVE_B","p256","defHash","createCurve","signWithApiKey","input","publicKeyString","uint8ArrayToHexString","createHash","content"],"sourceRoot":""}